{
  "get_critic_controversy": [
    "WITH Config AS (SELECT 0.5 AS score_weight, 0.5 AS play_weight, 10.0 AS max_score),",
    "CredibilityConstant AS (SELECT 15 AS C),",
    "MaturityThreshold AS (SELECT 10 AS min_ratings),",
    "CriticRatingCounts AS (SELECT critic_id, COUNT(id) AS n FROM ratings GROUP BY critic_id),",
    "GameStats AS (",
    "  SELECT g.id AS game_id, AVG(r.score) AS avg_game_score,",
    "  COUNT(r.critic_id)::FLOAT / (SELECT COUNT(*) FROM critics) AS participation_rate",
    "  FROM games g LEFT JOIN ratings r ON g.id = r.game_id",
    "  WHERE g.upcoming IS FALSE GROUP BY g.id",
    "),",
    "CriticGameScaffold AS (",
    "  SELECT c.id AS critic_id, c.critic_name, g.id AS game_id",
    "  FROM critics c CROSS JOIN games g WHERE g.upcoming IS FALSE",
    "),",
    "DeviationScores AS (",
    "  SELECT s.critic_id, s.critic_name, s.game_id, r.id as rating_id,",
    "  (ABS(r.score - gs.avg_game_score) / (SELECT max_score FROM Config)) AS normalized_score_deviation,",
    "  CASE",
    "    WHEN COALESCE(crc.n, 0) < (SELECT min_ratings FROM MaturityThreshold) THEN 0",
    "    WHEN r.score IS NOT NULL AND gs.participation_rate <= 0.5 THEN (1.0 - gs.participation_rate)",
    "    WHEN r.score IS NULL AND gs.participation_rate > 0.5 THEN gs.participation_rate",
    "    ELSE 0",
    "  END AS play_deviation",
    "  FROM CriticGameScaffold s",
    "  JOIN GameStats gs ON s.game_id = gs.game_id",
    "  LEFT JOIN ratings r ON s.critic_id = r.critic_id AND s.game_id = r.game_id",
    "  LEFT JOIN CriticRatingCounts crc ON s.critic_id = crc.critic_id",
    "),",
    "ObservedControversy AS (",
    "  SELECT",
    "    d.critic_name,",
    "    AVG(COALESCE(d.normalized_score_deviation * (SELECT score_weight FROM Config), 0) + (d.play_deviation * (SELECT play_weight FROM Config))) AS observed_score,",
    "    COUNT(d.rating_id) AS n",
    "  FROM DeviationScores d",
    "  GROUP BY d.critic_name",
    "),",
    "GlobalControversy AS (",
    "  SELECT AVG(observed_score) AS prior_score FROM ObservedControversy",
    ")",
    "SELECT",
    "  oc.critic_name,",
    "  ((oc.n::FLOAT / (oc.n + (SELECT C FROM CredibilityConstant))) * oc.observed_score) + (((SELECT C FROM CredibilityConstant)::FLOAT / (oc.n + (SELECT C FROM CredibilityConstant))) * gc.prior_score) AS controversy_score",
    "FROM ObservedControversy oc, GlobalControversy gc",
    "ORDER BY controversy_score DESC"
  ],
  "get_critic_controversy_breakdown": [
    "WITH Config AS (SELECT 0.5 AS score_weight, 0.5 AS play_weight, 10.0 AS max_score),",
    "CredibilityConstant AS (SELECT 15 AS C),",
    "MaturityThreshold AS (SELECT 10 AS min_ratings),",
    "CriticRatingCounts AS (SELECT critic_id, COUNT(id) AS n FROM ratings GROUP BY critic_id),",
    "GameStats AS (",
    "  SELECT g.id AS game_id, AVG(r.score) AS avg_game_score,",
    "  COUNT(r.critic_id)::FLOAT / (SELECT COUNT(*) FROM critics) AS participation_rate",
    "  FROM games g LEFT JOIN ratings r ON g.id = r.game_id",
    "  WHERE g.upcoming IS FALSE GROUP BY g.id",
    "),",
    "CriticGameScaffold AS (",
    "  SELECT c.id AS critic_id, c.critic_name, g.id AS game_id",
    "  FROM critics c CROSS JOIN games g WHERE g.upcoming IS FALSE",
    "),",
    "DeviationScores AS (",
    "  SELECT s.critic_id, s.critic_name, s.game_id, r.id as rating_id,",
    "  (ABS(r.score - gs.avg_game_score) / (SELECT max_score FROM Config)) AS normalized_score_deviation,",
    "  CASE",
    "    WHEN COALESCE(crc.n, 0) < (SELECT min_ratings FROM MaturityThreshold) THEN 0",
    "    WHEN r.score IS NOT NULL AND gs.participation_rate <= 0.5 THEN (1.0 - gs.participation_rate)",
    "    WHEN r.score IS NULL AND gs.participation_rate > 0.5 THEN gs.participation_rate",
    "    ELSE 0",
    "  END AS play_deviation",
    "  FROM CriticGameScaffold s",
    "  JOIN GameStats gs ON s.game_id = gs.game_id",
    "  LEFT JOIN ratings r ON s.critic_id = r.critic_id AND s.game_id = r.game_id",
    "  LEFT JOIN CriticRatingCounts crc ON s.critic_id = crc.critic_id",
    "),",
    "ObservedControversy AS (",
    "  SELECT",
    "    d.critic_name,",
    "    AVG(COALESCE(d.normalized_score_deviation * (SELECT score_weight FROM Config), 0) + (d.play_deviation * (SELECT play_weight FROM Config))) AS observed_score,",
    "    COUNT(d.rating_id) AS n",
    "  FROM DeviationScores d",
    "  GROUP BY d.critic_name",
    "),",
    "GlobalControversy AS (",
    "  SELECT AVG(observed_score) AS prior_score FROM ObservedControversy",
    ")",
    "SELECT",
    "  oc.critic_name,",
    "  oc.observed_score,",
    "  oc.n,",
    "  gc.prior_score,",
    "  (SELECT C FROM CredibilityConstant) AS credibility_constant,",
    "  ((oc.n::FLOAT / (oc.n + (SELECT C FROM CredibilityConstant))) * oc.observed_score) + (((SELECT C FROM CredibilityConstant)::FLOAT / (oc.n + (SELECT C FROM CredibilityConstant))) * gc.prior_score) AS controversy_score",
    "FROM ObservedControversy oc, GlobalControversy gc"
  ]
}